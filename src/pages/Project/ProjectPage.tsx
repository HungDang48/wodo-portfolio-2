import React, { useState } from 'react';
import './ProjectPage.css';

const bmcData = {
  keyPartners: [
    'M√°i ·∫•m cha T·ªãnh',
    'C√°c b·∫°n h∆∞·ªõng ƒë·∫°o sinh ƒë∆°n v·ªã',
    'Li√™n ƒëo√†n Tao Ph√πng'
  ],
  keyActivities: [
    'Thi·∫øt k·∫ø c√°c tr√≤ ch∆°i thi√™n nhi√™n',
    'T·ªï ch·ª©c sinh ho·∫°t ph√π h·ª£p cho tr·∫ª ƒë·ªô tu·ªïi S√≥i ‚Äì H√†i Ly',
    'G√¢y qu·ªπ & qu·∫£n l√Ω t√†i tr·ª£ duy tr√¨ sinh ho·∫°t',
    'ƒê√°nh gi√° t√°c ƒë·ªông v√† r·ªßi ro t√†i ch√≠nh',
    'X√¢y d·ª±ng t√†i li·ªáu ho·∫°t ƒë·ªông & qu·∫£n l√Ω'
  ],
  valuePropositions: [
    'Kh√¥ng gian vui ch∆°i s√°ng t·∫°o v√† an to√†n cho tr·∫ª m·ªì c√¥i',
    'Gi√°o d·ª•c k·ªπ nƒÉng s·ªëng v√† tinh th·∫ßn t·∫≠p th·ªÉ',
    'Gi·∫£m c·∫£m gi√°c c√¥ l·∫≠p v√† tƒÉng k·∫øt n·ªëi x√£ h·ªôi',
    'G√≥p ph·∫ßn v√†o SDGs: Gi√°o d·ª•c, B√¨nh ƒë·∫≥ng, H·∫°nh ph√∫c',
    'Gi·∫£m nguy c∆° m·∫Øc b·ªánh t√¢m l√Ω ·ªü tr·∫ª m·ªì c√¥i'
  ],
  customerRelationships: [
    'G·∫Øn k·∫øt qua ho·∫°t ƒë·ªông t√¨nh nguy·ªán th∆∞·ªùng xuy√™n',
    'C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô & t√°c ƒë·ªông x√£ h·ªôi ƒë·∫øn ƒë∆°n v·ªã h·ªó tr·ª£, nh√† t√†i tr·ª£, t·ªï ch·ª©c ƒë·ªìng h√†nh'
  ],
  customerSegments: [
    'Tr·∫ª m·∫ßm non t·∫°i tr·∫°i tr·∫ª m·ªì c√¥i ‚Äì ƒë·ªëi t∆∞·ª£ng th·ª• h∆∞·ªüng ch√≠nh',
    'Tr·∫°i m·ªì c√¥i, trung t√¢m b·∫£o tr·ª£ ‚Äì ƒë·ªëi t√°c tri·ªÉn khai',
    'Nh√† t√†i tr·ª£, t·ªï ch·ª©c phi l·ª£i nhu·∫≠n ‚Äì ƒë·ªëi t∆∞·ª£ng thuy·∫øt ph·ª•c ƒë·ªÉ t√†i tr·ª£'
  ],
  keyResources: [
    'Th√†nh vi√™n to√°n WODO',
    'Tr√°ng sinh li√™n ƒëo√†n Tao Ph√πng'
  ],
  channels: [
    'H·ª£p t√°c v·ªõi tr·∫°i tr·∫ª m·ªì c√¥i & t·ªï ch·ª©c x√£ h·ªôi b√™n ngo√†i',
    'Truy·ªÅn th√¥ng m·∫°ng x√£ h·ªôi (Facebook, TikTok, YouTube)',
    'Landing page gi·ªõi thi·ªáu d·ª± √°n c·ªßa to√°n WODO'
  ],
  costStructure: [
    'Chi ph√≠ v·∫≠t d·ª•ng thi·∫øt k·∫ø & x√¢y d·ª±ng tr√≤ ch∆°i',
    'Chi ph√≠ ƒë·ªìng ph·ª•c, ƒë·∫°o c·ª• sinh ho·∫°t (optional)',
    'Chi ph√≠ truy·ªÅn th√¥ng & g√¢y qu·ªπ',
    'Chi ph√≠ qu·∫£n l√Ω, v·∫≠n h√†nh d·ª± √°n',
    'Chi ph√≠ b√°nh, k·∫πo sinh ho·∫°t (optional)'
  ],
  revenueStreams: [
    'T√†i tr·ª£ t·ª´ c√° nh√¢n, tr∆∞·ªùng h∆∞·ªõng ƒë·∫°o, ph·ª• huynh',
    'H·ª£p t√°c CSVC v·ªõi cha T·ªãnh',
    'G√¢y qu·ªπ t·ª´ c·ªông ƒë·ªìng HƒêS (crowdfunding)',
    'T·ªï ch·ª©c workshop/bu√¥n b√°n g√¢y qu·ªπ sinh ho·∫°t'
  ]
};

const blockConfig = {
  keyPartners: { color: 'purple-pink', icon: 'ü§ù', bgColor: 'bg-purple' },
  keyActivities: { color: 'blue-cyan', icon: '‚ö°', bgColor: 'bg-blue' },
  keyResources: { color: 'green-emerald', icon: 'üéØ', bgColor: 'bg-green' },
  valuePropositions: { color: 'orange-red', icon: 'üíé', bgColor: 'bg-orange' },
  customerRelationships: { color: 'pink-rose', icon: '‚ù§Ô∏è', bgColor: 'bg-pink' },
  channels: { color: 'indigo-purple', icon: 'üì°', bgColor: 'bg-indigo' },
  customerSegments: { color: 'teal-green', icon: 'üë•', bgColor: 'bg-teal' },
  costStructure: { color: 'red-pink', icon: 'üí∞', bgColor: 'bg-red' },
  revenueStreams: { color: 'emerald-teal', icon: 'üíµ', bgColor: 'bg-emerald' }
};

interface BlockComponentProps {
  title: string;
  items: string[];
  config: {
    color: string;
    icon: string;
    bgColor: string;
  };
  isLarge?: boolean;
}

const BlockComponent: React.FC<BlockComponentProps> = ({ title, items, config, isLarge = false }) => {
  const [isHovered, setIsHovered] = useState(false);
  
  return (
    <div 
      className={`
        bmc-block ${config.bgColor} ${config.color}
        ${isHovered ? 'hovered' : ''}
        ${isLarge ? 'large' : ''}
      `}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* Gradient overlay */}
      <div className="gradient-overlay"></div>
      
      {/* Content */}
      <div className="block-content">
        <div className="block-header">
          <div className="icon-container">
            {config.icon}
          </div>
          <h2 className="block-title">
            {title}
          </h2>
        </div>
        
        <div className={`items-grid ${isLarge ? 'large-grid' : ''}`}>
          {items.map((item, index) => (
            <div 
              key={item} 
              className="item-card"
              style={{ 
                animationDelay: `${index * 100}ms`
              }}
            >
              <div className="item-content">
                <div className="item-dot"></div>
                <span className="item-text">{item}</span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

const ProjectPage: React.FC = () => {
  return (
    <div className="page-container">
      {/* Background decorative elements */}
      <div className="background-decorations">
        <div className="decoration-orb orb-1"></div>
        <div className="decoration-orb orb-2"></div>
        <div className="decoration-orb orb-3"></div>
      </div>
      
      <div className="main-content">
        {/* Header */}
        <div className="page-header">
          <div className="header-icon-title">
            <div className="header-icon">
              üìä
            </div>
            <h1 className="page-title">
              Business Model Canvas
            </h1>
          </div>
          <p className="page-description">
            Th√¥ng tin v·ªÅ d·ª± √°n 
          </p>
          <div className="title-underline"></div>
        </div>

        {/* BMC Grid */}
        <div className="bmc-grid">
          {/* Row 1 */}
          <BlockComponent 
            title="Key Partners" 
            items={bmcData.keyPartners} 
            config={blockConfig.keyPartners}
          />
          <BlockComponent 
            title="Key Activities" 
            items={bmcData.keyActivities} 
            config={blockConfig.keyActivities}
          />
          <BlockComponent 
            title="Value Propositions" 
            items={bmcData.valuePropositions} 
            config={blockConfig.valuePropositions}
          />
          <BlockComponent 
            title="Customer Relationships" 
            items={bmcData.customerRelationships} 
            config={blockConfig.customerRelationships}
          />
          <BlockComponent 
            title="Customer Segments" 
            items={bmcData.customerSegments} 
            config={blockConfig.customerSegments}
          />
          
          {/* Row 2 */}
          <BlockComponent 
            title="Key Resources" 
            items={bmcData.keyResources} 
            config={blockConfig.keyResources}
          />
          <div className="empty-space">
            {/* Empty space for traditional BMC layout */}
          </div>
          <BlockComponent 
            title="Channels" 
            items={bmcData.channels} 
            config={blockConfig.channels}
          />
          
          {/* Row 3 */}
          <div className="cost-section">
            <BlockComponent 
              title="Cost Structure" 
              items={bmcData.costStructure} 
              config={blockConfig.costStructure}
              isLarge={true}
            />
          </div>
          <div className="revenue-section">
            <BlockComponent 
              title="Revenue Streams" 
              items={bmcData.revenueStreams} 
              config={blockConfig.revenueStreams}
              isLarge={true}
            />
          </div>
        </div>

        {/* Footer */}
        <div className="page-footer">
          <div className="footer-badge">
            <div className="status-dot"></div>
            <span className="footer-text">Project Framework</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProjectPage;